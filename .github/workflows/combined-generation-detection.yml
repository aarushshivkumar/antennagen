name: Combined Image Generation and Detection

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual triggering
    inputs:
      max_images:
        description: 'Maximum images to generate per key'
        required: false
        default: '500'
      confidence_threshold:
        description: 'Detection confidence threshold'
        required: false
        default: '0.5'
      skip_generation:
        description: 'Skip image generation (detection only)'
        required: false
        default: 'false'
        type: boolean
      skip_detection:
        description: 'Skip object detection (generation only)'
        required: false
        default: 'false'
        type: boolean

jobs:
  image-generation:
    runs-on: ubuntu-latest
    timeout-minutes: 360 # 6 hours max
    if: github.event.inputs.skip_generation != 'true'
    outputs:
      images_generated: ${{ steps.generation.outputs.images_generated }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies for generation
      run: |
        pip install google-genai pillow
        
    - name: Create output directory
      run: mkdir -p output
      
    - name: Generate images with all API keys
      id: generation
      env:
        GEN_KEYS: ${{ secrets.GEN_KEYS }}
        MAX_IMAGES_PER_KEY: ${{ github.event.inputs.max_images || '500' }}
      run: |
        python image_generator.py
        
        # Count generated images
        image_count=$(ls output/*.jpg 2>/dev/null | wc -l)
        echo "images_generated=$image_count" >> $GITHUB_OUTPUT
        echo "Generated $image_count images"
        
    - name: Upload generated images
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: generated-images-${{ github.run_number }}
        path: output/
        retention-days: 30

  object-detection:
    needs: [image-generation]
    runs-on: ubuntu-latest
    timeout-minutes: 180 # 3 hours max
    if: |
      always() && 
      (needs.image-generation.result == 'success' || needs.image-generation.result == 'skipped') &&
      github.event.inputs.skip_detection != 'true' &&
      (needs.image-generation.outputs.images_generated > 0 || github.event.inputs.skip_generation == 'true')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download generated images (if generation ran)
      if: needs.image-generation.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: generated-images-${{ github.run_number }}
        path: output/
      continue-on-error: true
        
    - name: Check for images to process
      id: check_images
      run: |
        # Check for images in output directory
        if [ -d "output" ]; then
          jpg_count=$(ls output/*.jpg 2>/dev/null | wc -l)
          png_count=$(ls output/*.png 2>/dev/null | wc -l)
          gif_count=$(ls output/*.gif 2>/dev/null | wc -l)
          total_count=$((jpg_count + png_count + gif_count))
        else
          total_count=0
        fi
        
        echo "Found $total_count images to process"
        
        if [ $total_count -gt 0 ]; then
          echo "images_found=true" >> $GITHUB_OUTPUT
          echo "image_count=$total_count" >> $GITHUB_OUTPUT
        else
          echo "images_found=false" >> $GITHUB_OUTPUT
          echo "image_count=0" >> $GITHUB_OUTPUT
        fi
        
    - name: Set up Python for detection
      if: steps.check_images.outputs.images_found == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies for detection
      if: steps.check_images.outputs.images_found == 'true'
      run: |
        pip install opencv-python sahi ultralytics torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        
    - name: Download model file
      if: steps.check_images.outputs.images_found == 'true'
      env:
        MODEL_URL: ${{ secrets.MODEL_URL }}
      run: |
        if [ -n "$MODEL_URL" ]; then
          echo "Downloading model from secure URL..."
          curl -L "$MODEL_URL" -o model.pt
        else
          echo "MODEL_URL secret not set, checking for base64 encoded model..."
        fi
        
    - name: Decode model from base64 (fallback)
      if: steps.check_images.outputs.images_found == 'true'
      env:
        MODEL_BASE64: ${{ secrets.MODEL_BASE64 }}
      run: |
        if [ ! -f "model.pt" ] && [ -n "$MODEL_BASE64" ]; then
          echo "Decoding model from base64..."
          echo "$MODEL_BASE64" | base64 -d > model.pt
        fi
        
    - name: Verify model file
      if: steps.check_images.outputs.images_found == 'true'
      run: |
        if [ -f "model.pt" ]; then
          echo "Model file found, size: $(du -h model.pt)"
          ls -la model.pt
        else
          echo "ERROR: Model file not found!"
          exit 1
        fi
        
    - name: Run object detection
      if: steps.check_images.outputs.images_found == 'true'
      env:
        INPUT_PATH: 'output'
        CONFIDENCE_THRESHOLD: ${{ github.event.inputs.confidence_threshold || '0.5' }}
        IMAGES_TO_PROCESS: ${{ steps.check_images.outputs.image_count }}
      run: python object_detection.py
      
    - name: Clean up model file
      if: always() && steps.check_images.outputs.images_found == 'true'
      run: |
        rm -f model.pt
        echo "Model file cleaned up"
        
    - name: Upload detection results
      if: steps.check_images.outputs.images_found == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: detection-results-${{ github.run_number }}
        path: |
          output/
          detection_logs/
        retention-days: 30
        
    - name: No images to process
      if: steps.check_images.outputs.images_found == 'false'
      run: |
        echo "No images found to process. Skipping object detection."
        echo "This could mean:"
        echo "1. Image generation was skipped"
        echo "2. Image generation failed to produce images"
        echo "3. No existing images in output directory"

  finalize:
    needs: [image-generation, object-detection]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all results
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
      continue-on-error: true
      
    - name: Organize final results
      run: |
        # Create final output structure
        mkdir -p final_output/images
        mkdir -p final_output/annotations
        mkdir -p final_output/logs
        
        # Copy images and annotations
        if [ -d "artifacts/generated-images-${{ github.run_number }}" ]; then
          cp artifacts/generated-images-${{ github.run_number }}/*.jpg final_output/images/ 2>/dev/null || true
          cp artifacts/generated-images-${{ github.run_number }}/*.png final_output/images/ 2>/dev/null || true
        fi
        
        if [ -d "artifacts/detection-results-${{ github.run_number }}" ]; then
          cp artifacts/detection-results-${{ github.run_number }}/output/*.txt final_output/annotations/ 2>/dev/null || true
          cp -r artifacts/detection-results-${{ github.run_number }}/detection_logs/* final_output/logs/ 2>/dev/null || true
        fi
        
        # Generate summary
        image_count=$(ls final_output/images/*.jpg final_output/images/*.png 2>/dev/null | wc -l)
        annotation_count=$(ls final_output/annotations/*.txt 2>/dev/null | wc -l)
        
        echo "=== WORKFLOW SUMMARY ===" > final_output/summary.txt
        echo "Run Number: ${{ github.run_number }}" >> final_output/summary.txt
        echo "Date: $(date)" >> final_output/summary.txt
        echo "Images Generated: $image_count" >> final_output/summary.txt
        echo "Annotations Created: $annotation_count" >> final_output/summary.txt
        echo "Generation Status: ${{ needs.image-generation.result }}" >> final_output/summary.txt
        echo "Detection Status: ${{ needs.object-detection.result }}" >> final_output/summary.txt
        
        cat final_output/summary.txt
        
    - name: Upload final combined results
      uses: actions/upload-artifact@v4
      with:
        name: final-results-${{ github.run_number }}
        path: final_output/
        retention-days: 30
        
    - name: Commit and push results (optional)
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Copy final results to repo
        cp -r final_output/* . 2>/dev/null || true
        
        git add images/ || true
        git add annotations/ || true
        git add logs/ || true
        git add summary.txt || true
        git add output/ || true
        git add detection_logs/ || true
        git commit -m "Combined workflow results - $(date)" || exit 0
        git push || true
