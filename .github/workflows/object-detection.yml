name: Object Detection Processing

on:
  # Primary trigger: Run when image generation completes
  workflow_run:
    workflows: ["Daily Image Generation"]
    types:
      - completed
  
  schedule:
    - cron: '0 6 * * *'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      input_path:
        description: 'Input directory path (relative to repo root)'
        required: false
        default: 'output'
      confidence_threshold:
        description: 'Detection confidence threshold'
        required: false
        default: '0.5'
      force_run:
        description: 'Force run even if no new images'
        required: false
        default: 'false'
        type: boolean

jobs:
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      trigger_type: ${{ steps.check.outputs.trigger_type }}
      last_processed: ${{ steps.check.outputs.last_processed }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check run conditions
      id: check
      run: |
        echo "Event: ${{ github.event_name }}"
        echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
        
        # Check if we should run based on trigger type
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "trigger_type=workflow_success" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "trigger_type=workflow_failed" >> $GITHUB_OUTPUT
            echo "Image generation workflow failed, skipping detection"
          fi
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "trigger_type=manual" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "schedule" ]]; then
          # For scheduled runs, check if we need to run
          # Look for recent image generation completion
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "trigger_type=scheduled_fallback" >> $GITHUB_OUTPUT
        else
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "trigger_type=unknown" >> $GITHUB_OUTPUT
        fi
        
        # Get last processed timestamp if exists
        if [[ -f "detection_logs/last_processed.txt" ]]; then
          echo "last_processed=$(cat detection_logs/last_processed.txt)" >> $GITHUB_OUTPUT
        else
          echo "last_processed=never" >> $GITHUB_OUTPUT
        fi

  object-detection:
    needs: check-conditions
    runs-on: ubuntu-latest
    timeout-minutes: 600
    if: needs.check-conditions.outputs.should_run == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Log trigger information
      run: |
        echo "Trigger type: ${{ needs.check-conditions.outputs.trigger_type }}"
        echo "Last processed: ${{ needs.check-conditions.outputs.last_processed }}"
        echo "Current run: ${{ github.run_number }}"
        
    - name: Download artifacts from image generation (workflow_run trigger)
      if: needs.check-conditions.outputs.trigger_type == 'workflow_success'
      uses: actions/download-artifact@v3
      with:
        name: generated-images-${{ github.event.workflow_run.run_number }}
        path: output/
        github-token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
      
    - name: Download latest artifacts (scheduled/manual trigger)
      if: needs.check-conditions.outputs.trigger_type != 'workflow_success'
      uses: actions/github-script@v6
      with:
        script: |
          // Find the most recent successful image generation run
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'image-generation.yml',
            status: 'completed',
            conclusion: 'success',
            per_page: 5
          });
          
          if (runs.data.workflow_runs.length > 0) {
            const latestRun = runs.data.workflow_runs[0];
            console.log(`Found latest successful image generation run: ${latestRun.run_number}`);
            
            // Try to download artifacts from the latest run
            try {
              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: latestRun.id
              });
              
              const imageArtifact = artifacts.data.artifacts.find(a => a.name.startsWith('generated-images-'));
              if (imageArtifact) {
                console.log(`Found artifact: ${imageArtifact.name}`);
                // Note: Direct artifact download via API requires additional setup
                // For now, we'll rely on existing images in the repo
              }
            } catch (error) {
              console.log('Could not download artifacts, will use existing images');
            }
          }
      continue-on-error: true
        
    - name: Check for images to process
      id: check_images
      run: |
        # Check multiple possible locations for images
        image_count=0
        
        # Check output directory
        if [ -d "output" ]; then
          jpg_count=$(ls output/*.jpg 2>/dev/null | wc -l)
          png_count=$(ls output/*.png 2>/dev/null | wc -l)
          image_count=$((jpg_count + png_count))
        fi
        
        echo "Found $image_count images to process"
        
        # Check if we should process based on force flag or image count
        if [[ "${{ github.event.inputs.force_run }}" == "true" ]] || [[ $image_count -gt 0 ]]; then
          echo "images_found=true" >> $GITHUB_OUTPUT
          echo "image_count=$image_count" >> $GITHUB_OUTPUT
        else
          echo "images_found=false" >> $GITHUB_OUTPUT
          echo "image_count=0" >> $GITHUB_OUTPUT
        fi
        
    - name: Set up Python
      if: steps.check_images.outputs.images_found == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      if: steps.check_images.outputs.images_found == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
        
    - name: Install Python dependencies
      if: steps.check_images.outputs.images_found == 'true'
      run: |
        pip install opencv-python sahi ultralytics torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        
    - name: Download model file
      if: steps.check_images.outputs.images_found == 'true'
      env:
        MODEL_URL: ${{ secrets.MODEL_URL }}
      run: |
        if [ -n "$MODEL_URL" ]; then
          echo "Downloading model from secure URL..."
          curl -L "$MODEL_URL" -o model.pt
        else
          echo "MODEL_URL secret not set, checking for base64 encoded model..."
        fi
        
    - name: Decode model from base64 (fallback)
      if: steps.check_images.outputs.images_found == 'true'
      env:
        MODEL_BASE64: ${{ secrets.MODEL_BASE64 }}
      run: |
        if [ ! -f "model.pt" ] && [ -n "$MODEL_BASE64" ]; then
          echo "Decoding model from base64..."
          echo "$MODEL_BASE64" | base64 -d > model.pt
        fi
        
    - name: Verify model file
      if: steps.check_images.outputs.images_found == 'true'
      run: |
        if [ -f "model.pt" ]; then
          echo "Model file found, size: $(du -h model.pt)"
          ls -la model.pt
        else
          echo "ERROR: Model file not found!"
          exit 1
        fi
        
    - name: Run object detection
      if: steps.check_images.outputs.images_found == 'true'
      env:
        INPUT_PATH: ${{ github.event.inputs.input_path || 'output' }}
        CONFIDENCE_THRESHOLD: ${{ github.event.inputs.confidence_threshold || '0.5' }}
        TRIGGER_TYPE: ${{ needs.check-conditions.outputs.trigger_type }}
        RUN_NUMBER: ${{ github.run_number }}
      run: python object_detection.py
      
    - name: Update last processed timestamp
      if: steps.check_images.outputs.images_found == 'true'
      run: |
        mkdir -p detection_logs
        echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" > detection_logs/last_processed.txt
        echo "Trigger: ${{ needs.check-conditions.outputs.trigger_type }}" >> detection_logs/last_processed.txt
        echo "Run: ${{ github.run_number }}" >> detection_logs/last_processed.txt
        
    - name: Clean up model file
      if: always() && steps.check_images.outputs.images_found == 'true'
      run: |
        rm -f model.pt
        echo "Model file cleaned up"
        
    - name: Upload detection results
      if: steps.check_images.outputs.images_found == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: detection-results-${{ github.run_number }}
        path: |
          output/
          detection_logs/
        retention-days: 30
        
    - name: Commit and push results (optional)
      if: steps.check_images.outputs.images_found == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add output/ || true
        git add detection_logs/ || true
        git commit -m "Object detection results - ${{ needs.check-conditions.outputs.trigger_type }} - $(date)" || exit 0
        git push || true
        
    - name: No images to process
      if: steps.check_images.outputs.images_found == 'false'
      run: |
        echo "No images found to process. Skipping object detection."
        echo "Trigger type: ${{ needs.check-conditions.outputs.trigger_type }}"
        echo "Image count: ${{ steps.check_images.outputs.image_count }}"
        echo ""
        echo "This could mean:"
        echo "1. The image generation workflow didn't produce any images"
        echo "2. The artifact download failed"
        echo "3. No new images since last processing"
        echo "4. This is a manual run without images in the output directory"
